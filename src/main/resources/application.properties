#访问根路径
server.servlet.context-path=/algz
#访问端口号
server.port=8080
#编码格式
server.tomcat.uri-encoding=utf-8

#方法1, CSRF需要排除的url列表,逗号相隔. "/upload","/webservice"
algz.csrf.execludeUrls = /common,/demo,/logout,/user
#方法2,CSRF需要排除的url的正则表达式.
#algz.csrf.unprotectedMatcher=^/rest/.*


#http://cxf.apache.org/docs/springboot.html
#自定义CXF webservice 访问路径: http://IP:端口/应用名/webservice/方法名?wsdl
cxf.path=/common/webservice
#cxf.jaxrs.component-scan=true
#cxf.jaxrs.classes-scan=com.algz.webservice.CommonServiceAImp

#应用名称
spring.application.name=springboot-demo
 
#------------------------spring mvc
server.servlet.jsp.init-parameters.development=true //开启JSP热部署
spring.mvc.view.prefix=/WEB-INF
spring.mvc.view.suffix=.jsp


#-----------------日志
 #配置日志文件的路径,文件名默认为 spring.log,与 logging.file.name(优先级高))配置二选一
# logging.file.path=/Users/jackie/workspace/rome/ 
# 配置日志(路径+文件名),如果不指定路径,默认为当前项目路径.
 logging.file.name=algz.log
 #配置root级别日志级别，即项目的所有日志. TRACE < DEBUG < INFO(默认) < WARN < ERROR < FATAL 
logging.level.root=INFO
#package级别
#logging.level.com.algz.platform=WARN
#定制日志输出格式。
#%d{HH:mm:ss.SSS}:日志输出时间;  
#%thread: 输出日志的进程名字，这在Web应用以及异步任务处理中很有用
#%-5level: 日志级别，并且使用5个字符靠左对齐
#%logger: 日志输出者的名字; %msg: 日志消息; %n: 平台的换行符
#logging.pattern.console=%d{yyyy/MM/dd-HH:mm:ss} [%thread] %-5level %logger- %msg%n 
#logging.pattern.file=%d{yyyy/MM/dd-HH:mm} [%thread] %-5level %logger- %msg%n
 
#-----------------------数据库相关配置
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.driverClassName=oracle.jdbc.OracleDriver
#spring.datasource.url=jdbc:mysql://localhost:3306/sql_test 
spring.datasource.url=jdbc:oracle:thin:@127.0.0.1:1521/SANY
#spring.datasource.url=jdbc:oracle:thin:@cn-zj-dx-2.sakurafrp.com:15211/SANY
spring.datasource.username=MCDP
spring.datasource.password=MCDP
#spring.datasource.max-idle=10
#spring.datasource.max-wait=10000
#spring.datasource.min-idle=5
#spring.datasource.initial-size=5

#-------------------Spring jpa的配置信息
spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect
#spring.jpa.hibernate.ddl-auto 参数用来配置是否开启自动更新数据库表结构，可取create、create-drop、update、validate、none五个值。 
#create 每次加载hibernate时，先删除已存在的数据库表结构再重新生成；
#create-drop 每次加载hibernate时，先删除已存在的数据库表结构再重新生成，并且当 sessionFactory关闭时自动删除生成的数据库表结构；
#update 第一次加载hibernate时,如果没有表，则自动生成数据库表结构；以后再次加载hibernate时根据model类自动更新表结构；
#validate 每次加载hibernate时，验证数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
#none 关闭自动更新 
#spring.jpa.hibernate.ddl-auto=update
#控制台显示建表语句
spring.jpa.show-sql=true

#spring.jackson.serialization.indent_output=true

 
#session生命周期
#server.servlet.session.timeout=30m

#---------------------上传
#单个文件的最大值
spring.servlet.multipart.max-file-size=100MB
#所有上传文件之和的最大值
spring.servlet.multipart.max-request-size=10GB

#------------------AMPQ
#对于rabbitMQ的支持
spring.rabbitmq.host=127.0.0.1
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
spring.rabbitmq.virtual-host=/
#如果consumer只是接收消息而不发送，就不用配置template相关内容。
#开启失败重试
spring.rabbitmq.template.retry.enabled=true
#第一次重试的间隔时长
spring.rabbitmq.template.retry.initial-interval=10000ms
#最长重试间隔,超过这个间隔将不再重试
spring.rabbitmq.template.retry.max-interval=300000ms
#下次重试间隔的倍数,此处是2即下次重试间隔是上次的2倍
spring.rabbitmq.template.retry.multiplier=2
#缺省的交换机名称，此处配置后，发送消息如果不指定交换机就会使用这个
spring.rabbitmq.template.exchange=topic.exchange
#生产者确认机制，确保消息会正确发送，如果发送失败会有错误回执，从而触发重试
#spring.rabbitmq.publi.publisher-confirm-type=

#-----------------------email
spring.mail.host=smtp.qiye.163.com //邮箱服务器地址
spring.mail.username=xxx@oo.com //用户名
spring.mail.password=xxyyooo //密码
spring.mail.default-encoding=UTF-8
#mail.fromMail.addr=xxx@oo.com //以谁来发送邮件

#------------------文件存储路径，不带结尾符“/"
algz.pathcode.filestorePath=D:/tem

#-------------------jni 文件引用路径 C:\Users\algz\Desktop\refDll\dll\tem\JniInterfaceClass.j4n.dll
algz.jni.dllDirPath=C:/Users/algz/Desktop/refDll/dll/tem